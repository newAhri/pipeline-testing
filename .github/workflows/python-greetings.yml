name: Python Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:


jobs:
  install-pip-deps:
    name: Install
    runs-on: self-hosted

    steps:
      - name: Deploy to Dev
        run: echo "Installing pip libraries.."
        
      - name: Clone python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: mtararujs/python-greetings
          ref: 4e911440a9886c7c26ccbb4eb55f0bc2a5067b51
          path: python-greetings
      
      - name: Install dependencies
        run: |
          cd python-greetings
          pip install -r requirements.txt


  deploy-to-dev:
    name: Deploy
    runs-on: self-hosted
    needs: [install-pip-deps]

    steps:
      - name: Deploy to Dev
        run: echo "Deploying to Dev environment.."

      - name: Clone python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: mtararujs/python-greetings
          ref: 4e911440a9886c7c26ccbb4eb55f0bc2a5067b51
          path: python-greetings
          fetch-depth: 0
          
      - name: Install dependencies
        run: pip install -r python-greetings/requirements.txt
          
      - name: Stop existing service
        run: |
          pm2 delete greetings-app-dev
          pm2 set env:errorlevel 0

      - name: Start service
        run: pm2 start app.py --name greetings-app-dev -- -- 7001
        working-directory: ./python-greetings

      - name: Verify Application Start
        run: pm2 status
        working-directory: ./python-greetings
      
      - name: Check server status
        run: curl http://localhost:7001
        working-directory: ./python-greetings

        

  tests-on-dev:
    name: Tests dev
    runs-on: self-hosted
    needs: [deploy-to-dev]

    steps:
      - name: Run tests on Dev
        run: echo "Running tests on Dev environment.."

      - name: Clone course-js-api-framework repository
        uses: actions/checkout@v3.5.2
        with:
          repository: mtararujs/course-js-api-framework
          path: course-js-api-framework

      - name: Install dependencies
        run: |
          npm install mocha --no-save
          npm install
        working-directory: ./course-js-api-framework

      - name: Run greetings tests
        run: |
          set NODE_ENV=greetings_dev
          npm run greetings greetings_dev
        working-directory: ./course-js-api-framework



  deploy-to-staging:
    name: Deploy stg
    runs-on: self-hosted
    needs: [tests-on-dev]

    steps:
      - name: Deploy to Staging
        run: echo "Deploying to Staging environment.."

      - name: Clone python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: mtararujs/python-greetings
          ref: 4e911440a9886c7c26ccbb4eb55f0bc2a5067b51
          path: python-greetings
          fetch-depth: 0

      - name: Install dependencies
        run: pip install -r python-greetings/requirements.txt

      - name: Stop existing service
        run: |
          pm2 delete greetings-app-staging
          pm2 set env:errorlevel 0

      - name: Start service
        run: pm2 start app.py --name greetings-app-staging -- -- 7002
        working-directory: ./python-greetings

      - name: Verify Application Start
        run: pm2 status
        working-directory: ./python-greetings
      
      - name: Check server status
        run: curl http://localhost:7002
        working-directory: ./python-greetings



  tests-on-staging:
    name: Tests stg
    runs-on: self-hosted
    needs: [deploy-to-staging]

    steps:
      - name: Run tests on Staging
        run: echo "Running tests on Staging environment.."

      - name: Clone course-js-api-framework repository
        uses: actions/checkout@v3.5.2
        with:
          repository: mtararujs/course-js-api-framework
          path: course-js-api-framework

      - name: Install dependencies
        run: |
          npm install mocha --no-save
          npm install
        working-directory: ./course-js-api-framework

      - name: Run greetings tests
        run: |
          set NODE_ENV=greetings_staging
          npm run greetings greetings_staging
        working-directory: ./course-js-api-framework

        


  deploy-to-preprod:
    name: Deploy preprod
    runs-on: self-hosted
    needs: [tests-on-staging]

    steps:
      - name: Deploy to Preprod
        run: echo "Deploying to Preprod environment.."

      - name: Clone python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: mtararujs/python-greetings
          ref: 4e911440a9886c7c26ccbb4eb55f0bc2a5067b51
          path: python-greetings
          fetch-depth: 0
          
      - name: Install dependencies
        run: pip install -r python-greetings/requirements.txt
        
      - name: Stop existing service
        run: |
          pm2 delete greetings-app-preprod
          pm2 set env:errorlevel 0

      - name: Start service
        run: pm2 start app.py --name greetings-app-preprod -- -- 7003

      - name: Verify Application Start
        run: pm2 status
        working-directory: ./python-greetings
      
      - name: Check server status
        run: curl http://localhost:7003
        working-directory: ./python-greetings



  tests-on-preprod:
    name: Tests preprod
    runs-on: self-hosted
    needs: [deploy-to-preprod]

    steps:
      - name: Run tests on Preprod
        run: echo "Running tests on Preprod environment.."

      - name: Clone course-js-api-framework repository
        uses: actions/checkout@v3.5.2
        with:
          repository: mtararujs/course-js-api-framework
          path: course-js-api-framework
          
      - name: Install dependencies
        run: |
          npm install mocha --no-save
          npm install
        working-directory: ./course-js-api-framework

      - name: Run greetings tests
        run: |
          set NODE_ENV=greetings_preprod
          npm run greetings greetings_preprod
        working-directory: ./course-js-api-framework


  deploy-to-prod:
    name: Deploy prod
    runs-on: self-hosted
    needs: [tests-on-preprod]

    steps:
      - name: Deploy to Prod
        run: echo "Deploying to Prod environment.."
      
      - name: Clone python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: mtararujs/python-greetings
          ref: 4e911440a9886c7c26ccbb4eb55f0bc2a5067b51
          path: python-greetings
          fetch-depth: 0

      - name: Install dependencies
        run: pip install -r python-greetings/requirements.txt

      - name: Stop existing service
        run: |
          pm2 delete greetings-app-prod
          pm2 set env:errorlevel 0

      - name: Start service
        run: pm2 start app.py --name greetings-app-prod -- -- 7004

      - name: Verify Application Start
        run: pm2 status
        working-directory: ./python-greetings
      
      - name: Check server status
        run: curl http://localhost:7004
        working-directory: ./python-greetings


  tests-on-prod:
    name: Tests prod
    runs-on: self-hosted
    needs: [deploy-to-prod]

    steps:
      - name: Run tests on Prod
        run: echo "Running tests on Prod environment.."

      - name: Clone course-js-api-framework repository
        uses: actions/checkout@v3.5.2
        with:
          repository: mtararujs/course-js-api-framework
          path: course-js-api-framework

      - name: Install dependencies
        run: |
          npm install mocha --no-save
          npm install
        working-directory: ./course-js-api-framework

      - name: Run greetings tests
        run: |
          set NODE_ENV=greetings_prod
          npm run greetings greetings_prod
        working-directory: ./course-js-api-framework
